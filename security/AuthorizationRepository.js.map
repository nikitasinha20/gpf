{"version":3,"sources":["security/AuthorizationRepository.ts"],"names":[],"mappings":"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","file":"AuthorizationRepository.js","sourcesContent":["import { repository } from \"nodedata/core/decorators\";\nimport { preauthorize } from \"nodedata/core/decorators/preauthorize\";\nimport { entityAction, EntityActionParam } from \"nodedata/core/decorators/entityAction\";\nimport { postfilter } from \"nodedata/core/decorators/postfilter\";\nimport { authorize } from \"nodedata/core/decorators/authorize\";\nimport { } from 'nodedata/di/decorators/inject';\nimport { DynamicRepository } from 'nodedata/core/dynamic/dynamic-repository';\nimport { inject } from 'nodedata/di/decorators/inject';\nimport Q = require('q');\n// import { logger } from \"../logging\";\n// import * as Logger from \"../services/common/services/LoggerService\";\n\n\nexport class AuthorizationRepository extends DynamicRepository {\n\n    ///Entity action Mehods\n\n    preCreate(params: EntityActionParam): Q.Promise<EntityActionParam> {\n        return Q.resolve(params);\n    }\n\n    postCreate(params: EntityActionParam): Q.Promise<EntityActionParam> {\n        return Q.when(params);\n    }\n\n    preUpdate(params: EntityActionParam): Q.Promise<EntityActionParam> {\n        return Q.resolve(params);\n    }\n\n    postUpdate(params: EntityActionParam): Q.Promise<EntityActionParam> {\n        return Q.when(params);\n    }\n\n\n    preBulkCreate(params: Array<EntityActionParam>): Q.Promise<Array<EntityActionParam>> {\n        return Q.resolve(params);\n    }\n\n    preBulkDelete(params: Array<EntityActionParam>): Q.Promise<Array<EntityActionParam>> {\n        return Q.resolve(params);\n    }\n\n    postBulkCreate(params: Array<EntityActionParam>): Q.Promise<Array<EntityActionParam>> {\n        return Q.resolve(params);\n    }\n\n    preBulkUpdate(params: Array<EntityActionParam>): Q.Promise<Array<EntityActionParam>> {\n        return Q.when(params);\n    }\n\n    postBulkUpdate(params: Array<EntityActionParam>): Q.Promise<Array<EntityActionParam>> {\n        return Q.when(params);\n    }\n\n    preDelete(params: EntityActionParam): Q.Promise<EntityActionParam> {\n        return Q.when(params);\n    }\n\n    postDelete(params: EntityActionParam): Q.Promise<EntityActionParam> {\n        return Q.when(params);\n    }\n\n    postBulkDelete(params: Array<EntityActionParam>): Q.Promise<Array<EntityActionParam>> {\n        return Q.when(params);\n    }\n\n    preRead(params: EntityActionParam): Q.Promise<EntityActionParam> {\n        return Q.when(params);\n    }\n\n    postRead(params: EntityActionParam): Q.Promise<any> {\n        return Q.when(params);\n    }\n\n    preBulkRead(params: Array<EntityActionParam>): Q.Promise<Array<EntityActionParam>> {\n        return Q.when(params);\n    }\n\n    postBulkRead(params: Array<EntityActionParam>): Q.Promise<Array<EntityActionParam>> {\n        return Q.when(params);\n    }\n\n    bulkPost(objArr: Array<any>, batchSize?: number): Q.Promise<any> {\n        let actionEntities: Array<EntityActionParam> = this.getEntityFromArgs.apply(this, arguments);\n        if (!actionEntities) {\n            actionEntities = [];\n        }\n        this.logEntityInfo(\"bulkPost\", objArr);\n        return this.preBulkCreate(actionEntities)\n            .then((params: Array<EntityActionParam>) => {\n                let entitiesToCreate: Array<any> = new Array<any>();\n                params.forEach((input: EntityActionParam) => { entitiesToCreate.push(input.inputEntity); });\n                arguments[0] = entitiesToCreate;\n                arguments[arguments.length - 1] = undefined;\n                return super.bulkPost.apply(this, arguments).then((createdDbOEntites: Array<any>) => {\n                    let indexInMainCollection: number = 0;\n                    createdDbOEntites.forEach((createdEntity) => {\n                        actionEntities[indexInMainCollection].newPersistentEntity = createdEntity;\n                        indexInMainCollection++;\n                    })\n\n                    return this.postBulkCreate(actionEntities).then((result) => {\n                       return result.map(x => x.newPersistentEntity)\n                    }\n                        );\n                }, (error) => {\n                    return Q.reject(error);\n                })\n            }, (error) => {\n                return Q.reject(error);\n            });\n\n    }\n\n    bulkPut(objArr: Array<any>, batchSize?: number, donotLoadChilds?: boolean) {\n        if (!objArr || !objArr.length) return Q.when(objArr);\n        let actionEntities: Array<EntityActionParam> = this.getEntityFromArgs.apply(this, arguments);\n        if (!actionEntities) {\n            actionEntities = [];\n        }\n        this.logEntityInfo(\"bulkPut\", objArr);\n        return this.preBulkUpdate(actionEntities)\n            .then((params: Array<EntityActionParam>) => {\n                let entitiesToUpdate: Array<any> = new Array<any>();\n                params.forEach((input: EntityActionParam) => { input.newPersistentEntity.__dbEntity = input.oldPersistentEntity; entitiesToUpdate.push(input.newPersistentEntity); });\n                arguments[0] = entitiesToUpdate;\n                arguments[arguments.length - 1] = undefined;\n                return super.bulkPut.apply(this, arguments).then((createdDbOEntites: Array<any>) => {\n                    let indexInMainCollection: number = 0;\n                    createdDbOEntites.forEach((createdEntity) => {\n                        actionEntities[indexInMainCollection].newPersistentEntity = createdEntity;\n                        indexInMainCollection++;\n                    })\n\n                    return this.postBulkUpdate(actionEntities).then((result) =>\n                        result.map(x => x.newPersistentEntity)\n                    );\n                }, (error) => {\n                    return Q.reject(error);\n                })\n            }, (error) => {\n                return Q.reject(error);\n            });\n    }\n\n    bulkDel(params: Array<any>) {\n        let actionParams: Array<EntityActionParam> = this.getEntityFromArgs.apply(this, arguments);\n        let entitiesToDelete = [];\n        if (!actionParams) {\n            actionParams = [];\n        }\n        this.logEntityInfo(\"bulkDel\", params);\n        actionParams.forEach((input: EntityActionParam) => { entitiesToDelete.push(input.newPersistentEntity); })\n        return this.preBulkDelete(actionParams)\n            .then((params: Array<EntityActionParam>) => {\n                return super.bulkDel(entitiesToDelete).then((updatedDbObj: Array<any>) => {\n                    return this.postBulkDelete(actionParams).then((result) =>\n                        result.map(x => x.newPersistentEntity)\n                    );\n                }, (error) => {\n                    return Q.reject(error);\n                })\n            }, (error) => {\n                return Q.reject(error);\n            });\n    }\n\n    // TODO: need to disccus whether we need to secure bulkPutMany action since it is not exposed  api, it is consumed by server only.\n    public bulkPutMany(objIds: Array<any>, obj: any) {\n        obj._id = objIds[0];\n        this.logEntityInfo(\"bulkPutMany\", objIds);\n        return super.bulkPutMany(objIds, obj);\n    }\n\n    findOne(id: any, donotLoadChilds?: boolean): Q.Promise<any> {\n        let params: EntityActionParam = this.getEntityFromArgs.apply(this, arguments);\n        if (!params) {\n            params = {};\n        }\n        return this.preRead(params).then(result => {\n            return this.postRead(result).then((updatedParams: EntityActionParam) => {\n                return Q.resolve(updatedParams.newPersistentEntity);\n            }).catch(exc => {\n                return Q.reject(exc);\n            });\n        }).catch(exc => {\n            return Q.reject(exc);\n        });\n    }\n\n    findMany(ids: Array<any>, toLoadEmbededChilds?: boolean): Q.Promise<any> {\n        let actionEntities: Array<EntityActionParam> = this.getEntityFromArgs.apply(this, arguments);\n        if (!actionEntities) {\n            actionEntities = [];\n        }\n        return this.preBulkRead(actionEntities).then(results => {\n            return this.postBulkRead(results).then(newResults => {\n                return Q.when(newResults.map(entity => entity.newPersistentEntity));\n            }).catch(exc => {\n                console.log(\"ERROR: \",exc);\n                return Q.reject(exc);\n            });\n        }).catch(exc => {\n            console.log(\"ERROR: \",exc);\n            return Q.reject(exc);\n        });\n    }\n\n\n\n\n\n    findWhere(query, selectedFields?: Array<any> | any, queryOptions?: any, toLoadChilds?: boolean): Q.Promise<any> {\n        let actionEntities: Array<EntityActionParam> = this.getEntityFromArgs.apply(this, arguments);\n        if (!actionEntities) {\n            actionEntities = [];\n        }\n        return this.preBulkRead(actionEntities).then(results => {\n            return this.postBulkRead(results).then(newResults => {\n                return Q.when(newResults.map(entity => entity.newPersistentEntity));\n            }).catch(exc => {\n                console.log(\"ERROR: \",exc);\n                return Q.reject(exc);\n            });\n        }).catch(exc => {\n            console.log(\"ERROR: \",exc);\n            return Q.reject(exc);\n        });\n    }\n\n    findByField(fieldName, value): Q.Promise<any> {\n        return super.findByField(fieldName, value);\n    }\n\n    findChild(id, prop): Q.Promise<any> {\n        return super.findChild(id, prop);\n    }\n\n\n    put(id: any, obj: any): Q.Promise<any> {\n        let resultEntityActionObj: EntityActionParam = this.getEntityFromArgs.apply(this, arguments);\n        if (!resultEntityActionObj) {\n            resultEntityActionObj = {};\n        }\n        this.logEntityInfo(\"put\", obj);\n        return this.preUpdate(resultEntityActionObj)\n            .then((params: EntityActionParam) => {\n                params.newPersistentEntity.__dbEntity = params.oldPersistentEntity;\n                return super.put(id, params.newPersistentEntity).then((updatedDbObj: any) => {\n                    resultEntityActionObj.newPersistentEntity = updatedDbObj;\n                    return this.postUpdate(resultEntityActionObj).then((updatedEntity: EntityActionParam) => {\n                        return Q.when(updatedEntity.newPersistentEntity);\n                    }, (exc) => {\n                        return Q.reject(exc);\n                    });\n                }, (error) => {\n                    return Q.reject(error);\n                })\n            }, (error) => {\n                return Q.reject(error);\n            });\n        //return super.put(id, obj);\n    }\n\n\n    post(obj: any): Q.Promise<any> {\n        this.logEntityInfo(\"post\", obj);\n        let resultEntityActionObj: EntityActionParam = this.getEntityFromArgs.apply(this, arguments);\n        if (!resultEntityActionObj) {\n            resultEntityActionObj = {};\n        }\n        return this.preCreate(resultEntityActionObj)\n            .then((params: EntityActionParam) => {\n                return super.post(params.inputEntity).then((updatedDbObj: any) => {\n                    resultEntityActionObj.newPersistentEntity = updatedDbObj;\n                    return this.postCreate(resultEntityActionObj).then((result) => result.newPersistentEntity );\n                }, (error) => {\n                    return Q.reject(error);\n                })\n            }, (error) => {\n                return Q.reject(error);\n            });\n    }\n\n    delete(obj: any) {\n        let resultEntityActionObj: EntityActionParam = this.getEntityFromArgs.apply(this, arguments);\n        if (!resultEntityActionObj) {\n            resultEntityActionObj = {};\n        }\n        this.logEntityInfo(\"delete\", resultEntityActionObj.newPersistentEntity._id);\n        return this.preDelete(resultEntityActionObj)\n            .then((params: EntityActionParam) => {\n                return super.delete(resultEntityActionObj.newPersistentEntity._id).then((updatedDbObj: any) => {\n                    resultEntityActionObj.newPersistentEntity = updatedDbObj;\n                    return this.postDelete(resultEntityActionObj).then((result) => result.newPersistentEntity); \n                }, (error) => {\n                    return Q.reject(error);\n                })\n            }, (error) => {\n                return Q.reject(error);\n            });\n    }\n\n    patch(id: any, obj) {\n        this.logEntityInfo(\"patch\", obj);\n        let resultEntityActionObj: EntityActionParam = this.getEntityFromArgs.apply(this, arguments);\n        if (!resultEntityActionObj) {\n            resultEntityActionObj = {};\n        }\n        return this.preUpdate(resultEntityActionObj)\n            .then((params: EntityActionParam) => {\n                params.inputEntity.__dbEntity = params.oldPersistentEntity;\n                return super.patch(id, params.inputEntity).then((updatedDbObj: any) => {\n                    resultEntityActionObj.newPersistentEntity = updatedDbObj;\n                    // return this.postUpdate(resultEntityActionObj.newPersistentEntity);\n                    return this.postUpdate(resultEntityActionObj).then((updatedEntity: EntityActionParam) => {\n                        return Q.when(updatedEntity.newPersistentEntity);\n                    }, (exc) => {\n                        return Q.reject(exc);\n                    });\n                }, (error) => {\n                    return Q.reject(error);\n                })\n            }, (error) => {\n                return Q.reject(error);\n            });\n\n    }\n\n    // @authorize({ roles: ['ROLE_A'] }) // Authorization part\n    findAll(): any {\n        let actionEntities: Array<EntityActionParam> = this.getEntityFromArgs.apply(this, arguments);\n        if (!actionEntities) {\n            actionEntities = [];\n        }\n        return this.postBulkRead(actionEntities).then((newResults: Array<EntityActionParam>) => {\n            return Q.when(newResults.map((x: EntityActionParam) => x.newPersistentEntity));\n        }).catch(exc => {\n            console.log(\"ERROR: \",exc);\n            return Q.reject(exc);\n        });\n    }\n\n    getEntityType(): any {\n        return super.getEntityType();\n    }\n\n    private getEntityFromArgs() {\n        let args: Array<any> = Array.prototype.slice.call(arguments);\n        let params: EntityActionParam = <EntityActionParam>args[args.length - 1];\n        return params;\n    }\n\n    private logEntityInfo(methodName: string, obj: any) {\n\n        // let incomingJsonLog = {\n        //     MenthodName: methodName,\n        //     EntityObj: obj\n        // };\n\n        //this.logger.logInfo(incomingJsonLog);\n    }\n\n}\nexport default AuthorizationRepository;\n"]}