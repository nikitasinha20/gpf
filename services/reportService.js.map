{"version":3,"sources":["services/reportService.ts"],"names":[],"mappings":"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","file":"reportService.js","sourcesContent":["import {service} from 'nodedata/di/decorators';\nimport {inject} from 'nodedata/di/decorators/inject';\nimport {report} from '../models/report';\nimport { test1 } from '../models/test';\nimport mongoose = require(\"mongoose\");\nimport * as studentRepository from '../repositories/studentRepository';\nimport * as Enumerable from 'linq';\nimport * as schoolRepository from '../repositories/schoolRepository';\nimport * as MyclassRepository from '../repositories/myclassRepository';\nimport * as TeacherRepository from '../repositories/teacherRepository';\nimport {myclass} from '../models/myclass';\nimport {school} from '../models/school';\nimport {teacher} from '../models/teacher';\nconst excel = require('node-excel-export');\n\n@service({ singleton: true, serviceName: 'studentService' })\nexport class ReportService {\n\n    @inject(studentRepository)\n    private studentRepo: studentRepository.StudentRepository;\n\n    @inject(schoolRepository)\n    private schoolRepo: schoolRepository.SchoolRepository;\n\n    @inject(MyclassRepository)\n    private MyclassRepo: MyclassRepository.MyclassRepository;\n\n    @inject(TeacherRepository)\n    private teacherRepo: TeacherRepository.TeacherRepository;\n\n    public createReport(params:any) {\n        var subjectParam = params[\"subject\"];\n        var standardParam = params[\"standard\"];\n        var assessmentParam = params[\"assessment\"]; \n        var reportDataList = [];\n        var studentList = this.studentRepo.getAllStudentList();\n        Enumerable.from(studentList).forEach(student => {\n            let reportData = {};\n            reportData['childName'] = student['name'];\n            reportData['gender'] =student['sex'];\n            let id = student['_id'];\n            return this.MyclassRepo.findWhere({'students._id' : id}).then((studentClass: myclass) => {\n                if(studentClass.standard === standardParam){\n                    reportData['standard'] = studentClass.standard;\n                    return this.schoolRepo.findWhere({'classes._id': studentClass._id}).then((studentSchool:school)=>{\n                        reportData['district'] = studentSchool.disctrict;\n                        reportData['block'] = studentSchool.block;\n                        reportData['cluster'] = studentSchool.cluster;\n                        reportData['schoolName'] = studentSchool.school_name;\n                        return this.teacherRepo.findWhere({'school_id': studentSchool._id.toString()}).then((schoolTeachers: Array<teacher>)=>{\n                            Enumerable.from(schoolTeachers).forEach(schoolTeacher =>{\n                                Enumerable.from(schoolTeacher.myclasses).forEach(teacherClass =>{\n                                    Enumerable.from(teacherClass.courses).forEach(teacherCourse =>{\n                                        if(teacherCourse.course_subject === subjectParam){\n                                            if(teacherClass.standard==studentClass.standard){\n                                                reportData['teacherName'] = schoolTeacher.name\n                                            }\n                                            reportDataList.push(reportData);\n                                        }\n                                    });\n                                });\n                            });\n                        });\n                    });\n                }\n            });\n        });\n        // var finalReport = this.exportData( reportDataList);\n        //export reportDataList(It contains all the rows)\n\n        return Q.when(reportDataList);\n    }\n\n    exportData(params: any){\n        const styles = {\n            headerDark: {\n                fill: {\n                  fgColor: {\n                    rgb: 'FF000000'\n                  }\n                },\n                font: {\n                  color: {\n                    rgb: 'FFFFFFFF'\n                  },\n                  sz: 14,\n                  bold: true,\n                  underline: true\n                }\n              },\n              cellPink: {\n                fill: {\n                  fgColor: {\n                    rgb: 'FFFFCCFF'\n                  }\n                }\n              },\n              cellGreen: {\n                fill: {\n                  fgColor: {\n                    rgb: 'FF00FF00'\n                  }\n                }\n            }\n        };\n        const heading = [\n        //     [{value: 'a1', style: styles.headerDark}, {value: 'b1', style: styles.headerDark}, {value: 'c1', style: styles.headerDark}],\n        //     ['a2', 'b2', 'c2'] // <-- It can be only values \n        ];\n\n        const specification = {\n            customer_name: { // <- the key should match the actual data key \n              displayName: 'Customer', // <- Here you specify the column header \n              headerStyle: styles.headerDark, // <- Header style \n              cellStyle: function(value, row) { // <- style renderer function \n                // if the status is 1 then color in green else color in red \n                // Notice how we use another cell value to style the current one \n                return (row.status_id == 1) ? styles.cellGreen : {fill: {fgColor: {rgb: 'FFFF0000'}}}; // <- Inline cell style is possible  \n              },\n              width: 120 // <- width in pixels \n            },\n            status_id: {\n              displayName: 'Status',\n              headerStyle: styles.headerDark,\n              cellFormat: function(value, row) { // <- Renderer function, you can access also any row.property \n                return (value == 1) ? 'Active' : 'Inactive';\n              },\n              width: '10' // <- width in chars (when the number is passed as string) \n            },\n            note: {\n              displayName: 'Description',\n              headerStyle: styles.headerDark,\n              cellStyle: styles.cellPink, // <- Cell style \n              width: 220 // <- width in pixels \n            }\n        }\n\n        const dataset = [params];\n\n        const report = excel.buildExport(\n            [ // <- Notice that this is an array. Pass multiple sheets to create multi sheet report \n              {\n                name: 'Report', // <- Specify sheet name (optional) \n                heading: heading, // <- Raw heading array (optional) \n                // merges: merges, // <- Merge cell ranges \n                specification: specification, // <- Report specification \n                data: dataset // <-- Report data \n              }\n            ]\n        );\n\n        return report;\n\n    }\n \n}\n\nexport default ReportService;\n\n\n"]}