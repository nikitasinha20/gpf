{"version":3,"sources":["services/reportService.ts"],"names":[],"mappings":"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","file":"reportService.js","sourcesContent":["import {service} from 'nodedata/di/decorators';\nimport {inject} from 'nodedata/di/decorators/inject';\nimport {report} from '../models/report';\nimport { test1 } from '../models/test';\nimport mongoose = require(\"mongoose\");\nimport * as studentRepository from '../repositories/studentRepository';\nimport * as Enumerable from 'linq';\nimport * as schoolRepository from '../repositories/schoolRepository';\nimport * as MyclassRepository from '../repositories/myclassRepository';\nimport * as TeacherRepository from '../repositories/teacherRepository';\nimport * as ScoreRepository from '../repositories/scoreRepository';\nimport * as QuestionRepository from '../repositories/questionRepository';\nimport {myclass} from '../models/myclass';\nimport {school} from '../models/school';\nimport {teacher} from '../models/teacher';\n// const excel = require('node-excel-export');\nvar json2xls = require('json2xls');\nconst fs = require('fs');\nimport Q = require('q');\nimport student from '../models/student';\nimport { score } from '../models/score';\nimport { question } from '../models/question';\n\n@service({ singleton: true, serviceName: 'studentService' })\nexport class ReportService {\n\n    @inject(studentRepository)\n    private studentRepo: studentRepository.StudentRepository;\n\n    @inject(schoolRepository)\n    private schoolRepo: schoolRepository.SchoolRepository;\n\n    @inject(ScoreRepository)\n    private scoreRepo: ScoreRepository.scoreRepository;\n\n    @inject(QuestionRepository)\n    private questionRepo: QuestionRepository.QuestionRepository;\n\n    @inject(MyclassRepository)\n    private MyclassRepo: MyclassRepository.MyclassRepository;\n\n    @inject(TeacherRepository)\n    private teacherRepo: TeacherRepository.TeacherRepository;\n\n    public createReport(param_standard:string, param_subject:string) { \n      var subjectParam = param_subject;\n      var standardParam = param_standard;\n      var reportDataList = [];\n      var asyncCalls = [];\n      return this.MyclassRepo.findWhere({\"standard\": standardParam}).then((classes: Array<myclass>) =>{\n        var studentsList;\n        Enumerable.from(classes).forEach(req_class=>{\n          if(req_class.students && req_class.students.length > 0){\n            // studentsList = studentsList.push(...req_class.students);\n            Enumerable.from(req_class.students).forEach(student => {\n              let reportData = {};\n              reportData['childName'] = student['name'];\n              reportData['gender'] =student['sex'];\n              asyncCalls.push(this.schoolRepo.findWhere({'classes._id': req_class._id}).then((studentSchools:Array<school>)=>{\n                var studentSchool = studentSchools[0];\n                if(studentSchool){\n                  reportData['district'] = studentSchool.disctrict;\n                  reportData['block'] = studentSchool.block;\n                  reportData['cluster'] = studentSchool.cluster;\n                  reportData['schoolName'] = studentSchool.school_name;\n                  return this.teacherRepo.findWhere({'school_id': studentSchool._id.toString()}).then((schoolTeachers: Array<teacher>)=>{\n                    Enumerable.from(schoolTeachers).forEach(schoolTeacher =>{\n                        Enumerable.from(schoolTeacher.myclasses).forEach(teacherClass =>{\n                            Enumerable.from(teacherClass.courses).forEach(teacherCourse =>{\n                                if(teacherCourse.course_subject === subjectParam){\n                                    if(teacherClass.standard==req_class.standard){\n                                        reportData['teacherName'] = schoolTeacher.name;\n                                    }\n                                    return this.scoreRepo.findWhere({'student': student._id}).then((scores: Array<score>)=>{\n                                      Enumerable.from(scores).forEach(score =>{\n                                        return this.questionRepo.findWhere({_id: score.question}).then((questions: Array<question>) =>{\n                                          var question = questions[0];\n                                          reportData[question.text] =  score.marks;\n                                          \n                                        });\n                                      });\n                                      let exists = false;\n                                      Enumerable.from(reportDataList).forEach(data=>{\n                                        if(reportData['childName'] == data['childName']){\n                                          exists = true;\n                                        }\n                                      })\n                                      if(!exists && Object.keys(reportData).length > 8){\n                                        reportData['class']= standardParam;\n                                        reportDataList.push(reportData);\n                                      }\n                                    });\n                                }\n                            });\n                        });\n                    });\n                  });\n                }\n              })\n            )\n           });\n          }\n        });\n        return Q.allSettled(asyncCalls).then(res => {\n          var finalReport = this.exportData( reportDataList)\n          return finalReport;\n        }).catch(err => {\n            throw err;\n        });\n      });\n    }\n\n    exportData(params: any){\n      var json = params\n    \n      var xls = json2xls(json);\n      \n      return fs.writeFileSync('data.xlsx', xls, 'binary');\n    }\n \n}\n\nexport default ReportService;\n\n\n"]}