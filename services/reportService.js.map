{"version":3,"sources":["services/reportService.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAAsB,wBAAwB,CAAC,CAAA;AAC/C,yBAAqB,+BAA+B,CAAC,CAAA;AAGrD,MAAO,QAAQ,WAAW,UAAU,CAAC,CAAC;AACtC,MAAY,iBAAiB,WAAM,mCAAmC,CAAC,CAAA;AACvE,MAAY,UAAU,WAAM,MAAM,CAAC,CAAA;AACnC,MAAY,gBAAgB,WAAM,kCAAkC,CAAC,CAAA;AACrE,MAAY,iBAAiB,WAAM,mCAAmC,CAAC,CAAA;AACvE,MAAY,iBAAiB,WAAM,mCAAmC,CAAC,CAAA;AACvE,MAAY,eAAe,WAAM,iCAAiC,CAAC,CAAA;AACnE,MAAY,kBAAkB,WAAM,oCAAoC,CAAC,CAAA;AACzE,MAAY,gBAAgB,WAAM,kCAAkC,CAAC,CAAA;AAKrE,8CAA8C;AAC9C,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACnC,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,MAAO,CAAC,WAAW,GAAG,CAAC,CAAC;AAMxB;IAuBW,YAAY,CAAC,cAAqB,EAAE,aAAoB;QAC7D,IAAI,YAAY,GAAG,aAAa,CAAC;QACjC,IAAI,aAAa,GAAG,cAAc,CAAC;QACnC,IAAI,cAAc,GAAG,EAAE,CAAC;QACxB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAC,UAAU,EAAE,aAAa,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAuB;YAC1F,IAAI,YAAY,CAAC;YACjB,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,SAAS;gBACxC,EAAE,CAAA,CAAC,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA,CAAC;oBACtD,2DAA2D;oBAC3D,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,OAAO;wBACjD,IAAI,UAAU,GAAG,EAAE,CAAC;wBACpB,UAAU,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;wBAC1C,UAAU,CAAC,QAAQ,CAAC,GAAE,OAAO,CAAC,KAAK,CAAC,CAAC;wBACrC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAC,aAAa,EAAE,SAAS,CAAC,GAAG,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,cAA4B;4BAC1G,IAAI,aAAa,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;4BACtC,EAAE,CAAA,CAAC,aAAa,CAAC,CAAA,CAAC;gCAChB,UAAU,CAAC,UAAU,CAAC,GAAG,aAAa,CAAC,SAAS,CAAC;gCACjD,UAAU,CAAC,OAAO,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC;gCAC1C,UAAU,CAAC,SAAS,CAAC,GAAG,aAAa,CAAC,OAAO,CAAC;gCAC9C,UAAU,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC,WAAW,CAAC;gCACrD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAC,WAAW,EAAE,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,cAA8B;oCACjH,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,aAAa;wCACjD,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,YAAY;4CACzD,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,aAAa;gDACvD,EAAE,CAAA,CAAC,aAAa,CAAC,cAAc,KAAK,YAAY,CAAC,CAAA,CAAC;oDAC9C,EAAE,CAAA,CAAC,YAAY,CAAC,QAAQ,IAAE,SAAS,CAAC,QAAQ,CAAC,CAAA,CAAC;wDAC1C,UAAU,CAAC,aAAa,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC;oDACnD,CAAC;oDACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAC,SAAS,EAAE,OAAO,CAAC,GAAG,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAoB;wDAClF,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK;4DACnC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAA0B;gEACxF,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gEAC5B,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAI,KAAK,CAAC,KAAK,CAAC;4DAE3C,CAAC,CAAC,CAAC;wDACL,CAAC,CAAC,CAAC;wDACH,IAAI,MAAM,GAAG,KAAK,CAAC;wDACnB,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,IAAI;4DAC1C,EAAE,CAAA,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAA,CAAC;gEAC/C,MAAM,GAAG,IAAI,CAAC;4DAChB,CAAC;wDACH,CAAC,CAAC,CAAC;wDACH,EAAE,CAAA,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA,CAAC;4DAChD,UAAU,CAAC,OAAO,CAAC,GAAE,aAAa,CAAC;4DACnC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;wDAClC,CAAC;oDACH,CAAC,CAAC,CAAC;gDACP,CAAC;4CACL,CAAC,CAAC,CAAC;wCACP,CAAC,CAAC,CAAC;oCACP,CAAC,CAAC,CAAC;gCACL,CAAC,CAAC,CAAC;4BACL,CAAC;wBACH,CAAC,CAAC,CACH,CAAA;oBACF,CAAC,CAAC,CAAC;gBACJ,CAAC;YACH,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG;gBACtC,IAAI,SAAS,GAAG,cAAc,GAAG,GAAG,GAAG,aAAa,GAAG,OAAO,CAAA;gBAC9D,IAAI,WAAW,GAAG,IAAI,CAAC,UAAU,CAAE,cAAc,EAAE,SAAS,CAAC,CAAA;gBAC7D,MAAM,CAAC,cAAc,CAAC;YACxB,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG;gBACR,MAAM,GAAG,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,UAAU,CAAC,MAAW,EAAE,SAAiB;QACvC,IAAI,IAAI,GAAG,MAAM,CAAA;QACjB,IAAI,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,0BAA0B;QAEpD,MAAM,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;IACpD,CAAC;IAEM,mBAAmB,CAAC,aAAa,EAAE,cAAc,EAAE,aAAa,EAAE,KAAK;QAC5E,IAAI,YAAY,GAAC,EAAE,CAAA;QACnB,IAAI,SAAS,GAAG,aAAa,GAAG,GAAG,GAAG,cAAc,GAAG,GAAG,GAAG,aAAa,GAAG,OAAO,CAAA;QACpF,IAAI,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAA;QACvD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAC,KAAK,EAAE,UAAU,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAwB;YACnF,EAAE,CAAA,CAAC,QAAQ,CAAC,CAAA,CAAC;gBACX,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAA;gBACzB,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,CAAA;gBACjC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAC,KAAK,EAAE,OAAO,CAAC,WAAW,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAuB;oBAC3F,EAAE,CAAA,CAAC,OAAO,CAAC,CAAA,CAAC;wBACV,IAAI,UAAU,GAAC,EAAE,CAAA;wBACjB,IAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;wBACvB,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAA;wBAC/B,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,WAAW;4BACjD,EAAE,CAAA,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,cAAe,CAAC,CAAA,CAAC;gCAC7C,IAAI,QAAQ,GAAG,WAAW,CAAC,UAAU,CAAC,CAAA;gCACtC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,OAAO;oCACvC,IAAI,WAAW,GAAG,EAAE,CAAA;oCACpB,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,CAAA;oCACjC,WAAW,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC;oCACzC,WAAW,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;oCAC9C,WAAW,CAAC,SAAS,CAAC,GAAG,aAAa,CAAC;oCACvC,WAAW,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;oCACzC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,YAAsB;wCACnE,EAAE,CAAA,CAAC,YAAY,CAAC,QAAQ,IAAI,cAAc,CAAC,CAAA,CAAC;4CAC1C,IAAI,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC;4CACnC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,CAAA;4CACjC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,aAAa;gDAC5C,EAAE,CAAA,CAAC,aAAa,CAAC,cAAc,IAAI,aAAa,CAAC,CAAA,CAAC;oDAChD,IAAI,MAAM,GAAG,aAAa,CAAC;oDAC3B,IAAI,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAA;oDACxC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,UAAU,CAAC,CAAA;oDACvC,WAAW,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC;oDAC7C,WAAW,CAAC,cAAc,CAAC,GAAG,UAAU,CAAC,aAAa,CAAC;oDACvD,IAAI,WAAW,GAAG,CAAC,CAAA;oDACnB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAC,SAAS,EAAE,OAAO,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE,UAAU,CAAC,GAAG,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAoB;wDAC5H,EAAE,CAAA,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAA,CAAC;4DAC1B,WAAW,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;4DAC7B,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK;gEACnC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAA;gEAC7B,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,QAAQ;oEACpD,EAAE,CAAA,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAA,CAAC;wEAC1D,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAA;wEACnC,EAAE,CAAA,CAAC,KAAK,CAAC,CAAA,CAAC;4EACR,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAA;4EAClC,EAAE,CAAA,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAA,CAAC;gFACnC,WAAW,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC;4EACnC,CAAC;4EACD,IAAI,CAAA,CAAC;gFACH,WAAW,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;4EAClC,CAAC;wEACH,CAAC;wEACD,IAAI,CAAA,CAAC;4EACH,IAAI,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;4EACjD,WAAW,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;4EACnC,WAAW,IAAI,KAAK,CAAC,KAAK,CAAC;wEAC7B,CAAC;oEAEH,CAAC;gEACH,CAAC,CAAC,CAAC;4DACL,CAAC,CAAC,CAAC;wDACL,CAAC;wDACD,IAAI,CAAA,CAAC;4DACH,WAAW,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;wDAChC,CAAC;wDACD,WAAW,CAAC,YAAY,CAAC,GAAG,WAAW,CAAC;wDACxC,WAAW,CAAC,iBAAiB,CAAC,GAAG,CAAE,WAAW,GAAG,UAAU,CAAC,aAAa,CAAE,GAAG,GAAG,CAAA;wDACjF,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;oDAChC,CAAC,CAAC,CAAC,CAAC;gDACN,CAAC;4CACH,CAAC,CAAC,CAAC;wCACL,CAAC;oCACH,CAAC,CAAC,CAAC;gCACL,CAAC,CAAC,CAAC;4BACL,CAAC;wBACH,CAAC,CAAC,CAAC;wBACH,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG;4BACtC,IAAI,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,SAAS,CAAC,CAAA;4BAC1D,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,EAAC,UAAU,EAAC,SAAS,EAAE,MAAM,EAAC,YAAY,EAAC,CAAC,CAAC;wBAChE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG;4BACR,MAAM,GAAG,CAAC;wBACd,CAAC,CAAC,CAAC;oBACL,CAAC;oBACD,QAAQ;oBACR,mDAAmD;oBACnD,IAAI;gBACN,CAAC,CAAC,CAAA;YAEJ,CAAC;YACD,QAAQ;YACR,0CAA0C;YAC1C,IAAI;QACN,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,kBAAkB,CAAC,GAAG;QAC3B,IAAI,WAAW,GAAG;YAChB,gBAAgB,EAAG,CAAC;YACpB,eAAe,EAAG,CAAC;YACnB,aAAa,EAAG,CAAC;YACjB,MAAM,EAAG,CAAC;SACX,CAAA;QACD,IAAI,MAAM,GAAG,GAAG,CAAC,IAAI,CAAA;QACrB,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,SAAS;YACvC,EAAE,CAAA,CAAC,SAAS,CAAC,iBAAiB,CAAC,GAAG,EAAE,IAAI,SAAS,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,CAAA,CAAC;gBACxE,SAAS,CAAC,QAAQ,CAAC,GAAG,iBAAiB,CAAC;gBACxC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA;YACtC,CAAC;YACD,IAAI,CAAC,EAAE,CAAA,CAAC,SAAS,CAAC,iBAAiB,CAAC,GAAG,EAAE,IAAI,SAAS,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,CAAA,CAAC;gBAC7E,SAAS,CAAC,QAAQ,CAAC,GAAG,gBAAgB,CAAC;gBACvC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,CAAA;YACrC,CAAC;YACD,IAAI,CAAC,EAAE,CAAA,CAAC,SAAS,CAAC,iBAAiB,CAAC,GAAG,EAAE,IAAI,SAAS,CAAC,iBAAiB,CAAC,IAAI,GAAG,CAAC,CAAA,CAAC;gBAC9E,SAAS,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAC;gBACpC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;YACnC,CAAC;YACD,IAAI,CAAA,CAAC;gBACD,SAAS,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;gBAC7B,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;YAC5B,CAAC;QACL,CAAC,CAAC,CAAC;QACH,IAAI,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC;YACvC,MAAM,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,CAAA;QAC3B,CAAC,CAAC,CAAC;QACH,IAAI,YAAY,GAAG,WAAW,CAAC,MAAM,CAAA;QACrC,IAAI,cAAc,GAAG,CAAC,CAAC,YAAY,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,YAAY,CAAC,GAAG,GAAG,CAAA;QAChF,IAAI,kBAAkB,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,YAAY,CAAC,GAAG,GAAG,CAAA;QACnE,IAAI,mBAAmB,GAAG,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,YAAY,CAAC,GAAG,GAAG,CAAA;QAC3E,IAAI,qBAAqB,GAAG,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,YAAY,CAAC,GAAG,GAAG,CAAA;QAC/E,IAAI,sBAAsB,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,GAAG,YAAY,CAAC,GAAG,GAAG,CAAA;QACjF,IAAI,aAAa,GAAG;YAChB,gBAAgB,EAAG,cAAc;YACjC,mBAAmB,EAAG,kBAAkB;YACxC,qBAAqB,EAAG,mBAAmB;YAC3C,uBAAuB,EAAG,qBAAqB;YAC/C,wBAAwB,EAAG,sBAAsB;YACjD,wBAAwB,EAAG,YAAY;SAC1C,CAAA;QACD,MAAM,CAAC,CAAC,aAAa,CAAC,CAAA;IACtB,CAAC;AAEL,CAAC;AA9OG;IAAC,eAAM,CAAC,iBAAiB,CAAC;gDACa,iBAAiB;kDAD9B;AAG1B;IAAC,eAAM,CAAC,gBAAgB,CAAC;+CACY,gBAAgB;iDAD5B;AAGzB;IAAC,eAAM,CAAC,eAAe,CAAC;8CACW,eAAe;gDAD1B;AAGxB;IAAC,eAAM,CAAC,kBAAkB,CAAC;iDACc,kBAAkB;mDADhC;AAG3B;IAAC,eAAM,CAAC,iBAAiB,CAAC;gDACa,iBAAiB;kDAD9B;AAG1B;IAAC,eAAM,CAAC,iBAAiB,CAAC;gDACa,iBAAiB;kDAD9B;AAG1B;IAAC,eAAM,CAAC,gBAAgB,CAAC;+CACY,gBAAgB;iDAD5B;AArB7B;IAAC,oBAAO,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,WAAW,EAAE,gBAAgB,EAAE,CAAC;;iBAAA;AAC/C,qBAAa,gBAgPzB,CAAA;AAED;kBAAe,aAAa,CAAC","file":"reportService.js","sourcesContent":["import {service} from 'nodedata/di/decorators';\nimport {inject} from 'nodedata/di/decorators/inject';\nimport {report} from '../models/report';\nimport { test1 } from '../models/test';\nimport mongoose = require(\"mongoose\");\nimport * as studentRepository from '../repositories/studentRepository';\nimport * as Enumerable from 'linq';\nimport * as schoolRepository from '../repositories/schoolRepository';\nimport * as MyclassRepository from '../repositories/myclassRepository';\nimport * as TeacherRepository from '../repositories/teacherRepository';\nimport * as ScoreRepository from '../repositories/scoreRepository';\nimport * as QuestionRepository from '../repositories/questionRepository';\nimport * as CourseRepository from '../repositories/courseRepository';\n\nimport {myclass} from '../models/myclass';\nimport {school} from '../models/school';\nimport {teacher} from '../models/teacher';\n// const excel = require('node-excel-export');\nvar json2xls = require('json2xls');\nconst fs = require('fs');\nimport Q = require('q');\nimport student from '../models/student';\nimport { score } from '../models/score';\nimport { question } from '../models/question';\n\n@service({ singleton: true, serviceName: 'studentService' })\nexport class ReportService {\n\n    @inject(studentRepository)\n    private studentRepo: studentRepository.StudentRepository;\n\n    @inject(schoolRepository)\n    private schoolRepo: schoolRepository.SchoolRepository;\n\n    @inject(ScoreRepository)\n    private scoreRepo: ScoreRepository.scoreRepository;\n\n    @inject(QuestionRepository)\n    private questionRepo: QuestionRepository.QuestionRepository;\n\n    @inject(MyclassRepository)\n    private MyclassRepo: MyclassRepository.MyclassRepository;\n\n    @inject(TeacherRepository)\n    private teacherRepo: TeacherRepository.TeacherRepository;\n\n    @inject(CourseRepository)\n    private courseRepo: CourseRepository.CourseRepository;\n\n    public createReport(param_standard:string, param_subject:string) { \n      var subjectParam = param_subject;\n      var standardParam = param_standard;\n      var reportDataList = [];\n      var asyncCalls = [];\n      return this.MyclassRepo.findWhere({\"standard\": standardParam}).then((classes: Array<myclass>) =>{\n        var studentsList;\n        Enumerable.from(classes).forEach(req_class=>{\n          if(req_class.students && req_class.students.length > 0){\n            // studentsList = studentsList.push(...req_class.students);\n            Enumerable.from(req_class.students).forEach(student => {\n              var reportData = {};\n              reportData['childName'] = student['name'];\n              reportData['gender'] =student['sex'];\n              asyncCalls.push(this.schoolRepo.findWhere({'classes._id': req_class._id}).then((studentSchools:Array<school>)=>{\n                var studentSchool = studentSchools[0];\n                if(studentSchool){\n                  reportData['district'] = studentSchool.disctrict;\n                  reportData['block'] = studentSchool.block;\n                  reportData['cluster'] = studentSchool.cluster;\n                  reportData['schoolName'] = studentSchool.school_name;\n                  return this.teacherRepo.findWhere({'school_id': studentSchool._id.toString()}).then((schoolTeachers: Array<teacher>)=>{\n                    Enumerable.from(schoolTeachers).forEach(schoolTeacher =>{\n                        Enumerable.from(schoolTeacher.myclasses).forEach(teacherClass =>{\n                            Enumerable.from(teacherClass.courses).forEach(teacherCourse =>{\n                                if(teacherCourse.course_subject === subjectParam){\n                                    if(teacherClass.standard==req_class.standard){\n                                        reportData['teacherName'] = schoolTeacher.name;\n                                    }\n                                    return this.scoreRepo.findWhere({'student': student._id}).then((scores: Array<score>)=>{\n                                      Enumerable.from(scores).forEach(score =>{\n                                        return this.questionRepo.findWhere({_id: score.question}).then((questions: Array<question>) =>{\n                                          var question = questions[0];\n                                          reportData[question.text] =  score.marks;\n                                          \n                                        });\n                                      });\n                                      var exists = false;\n                                      Enumerable.from(reportDataList).forEach(data=>{\n                                        if(reportData['childName'] == data['childName']){\n                                          exists = true;\n                                        }\n                                      });\n                                      if(!exists && Object.keys(reportData).length > 8){\n                                        reportData['class']= standardParam;\n                                        reportDataList.push(reportData);\n                                      }\n                                    });\n                                }\n                            });\n                        });\n                    });\n                  });\n                }\n              })\n            )\n           });\n          }\n        });\n        return Q.allSettled(asyncCalls).then(res => {\n          var file_name = param_standard + \"_\" + param_subject + \".xlsx\"\n          var finalReport = this.exportData( reportDataList, file_name)\n          return reportDataList;\n        }).catch(err => {\n            throw err;\n        });\n      });\n    }\n\n    exportData(params: any, file_name: string){\n      var json = params\n      var xls = json2xls(json); //, {style:\"styles.xml\"});\n      \n      return fs.writeFileSync(file_name, xls, 'binary');\n    }\n\n    public createTeacherReport(param_teacher, param_standard, param_subject, saral): Q.Promise<any>{\n      var responseData=[]\n      var file_name = param_teacher + \"_\" + param_standard + \"_\" + param_subject + \".xlsx\"\n      var teacher_id = mongoose.Types.ObjectId(param_teacher)\n      return this.teacherRepo.findWhere({\"_id\": teacher_id}).then((teachers :Array<teacher>) =>{\n        if(teachers){\n          var teacher = teachers[0]\n          console.log(\"Teacher: \", teacher)\n          return this.schoolRepo.findWhere({\"_id\": teacher[\"school_id\"]}).then((schools : Array<school>) =>{\n            if(schools){\n              var asyncCalls=[]\n              var school = schools[0]\n              console.log(\"school: \", school)\n              Enumerable.from(school.classes).forEach(schoolClass =>{\n                if(schoolClass[\"standard\"] == param_standard ){\n                  var students = schoolClass[\"students\"]\n                  Enumerable.from(students).forEach(student =>{\n                    var responseObj = {}\n                    console.log(\"student: \", student)\n                    responseObj[\"Standard\"] = param_standard;\n                    responseObj[\"School\"] = school[\"school_name\"];\n                    responseObj[\"Subject\"] = param_subject;\n                    responseObj[\"Student\"] = student[\"name\"];\n                    Enumerable.from(teacher[\"myclasses\"]).forEach((teacherClass : myclass) => {\n                      if(teacherClass.standard == param_standard){\n                        var courses = teacherClass.courses;\n                        console.log(\"courses: \", courses)\n                        Enumerable.from(courses).forEach(teacherCourse =>{\n                          if(teacherCourse.course_subject == param_subject){\n                            var course = teacherCourse;\n                            var assessment = course[\"assesments\"][0]\n                            console.log(\"assessment: \", assessment)\n                            responseObj[\"Assessment\"] = assessment.title;\n                            responseObj[\"MaximumMarks\"] = assessment.maximum_marks;\n                            var total_marks = 0\n                            asyncCalls.push(this.scoreRepo.findWhere({\"student\": student[\"_id\"], \"assessment\": assessment._id}).then((scores: Array<score>) => {\n                              if(scores && scores.length){\n                                responseObj[\"Scored\"] = true;\n                                Enumerable.from(scores).forEach(score =>{\n                                  console.log(\"score: \", score)\n                                  Enumerable.from(assessment.questions).forEach(question =>{\n                                    if(question[\"_id\"].toString() == score.question.toString()){\n                                      console.log(\"question: \", question)\n                                      if(saral){\n                                        var q_no = question[\"question_no\"]\n                                        if(responseObj.hasOwnProperty(q_no)){\n                                          responseObj[q_no] += score.marks; \n                                        }\n                                        else{\n                                          responseObj[q_no] = score.marks;\n                                        }\n                                      }\n                                      else{\n                                        var text = question[\"text\"].split('.').join(\" \");\n                                        responseObj[text] = score[\"marks\"];\n                                        total_marks += score.marks;\n                                      }\n                                      \n                                    }\n                                  });\n                                });\n                              }\n                              else{\n                                responseObj[\"Scored\"] = false;\n                              }\n                              responseObj[\"TotalMarks\"] = total_marks;\n                              responseObj[\"TotalPercentage\"] = ( total_marks / assessment.maximum_marks ) * 100\n                              responseData.push(responseObj)\n                            }));\n                          }\n                        });\n                      }\n                    });\n                  });\n                }\n              });\n              return Q.allSettled(asyncCalls).then(res => {\n                var finalReport = this.exportData(responseData, file_name)\n                return Q.resolve({\"filename\":file_name, \"data\":responseData});\n              }).catch(err => {\n                  throw err;\n              });\n            }\n            // else{\n            //   return Q.reject(\"Teacher's school not found!\")\n            // }\n          })\n          \n        }\n        // else{\n        //   return Q.reject(\"Teacher not found!\")\n        // }\n      });\n    }\n\n    public createPragatReport(obj){\n      var pragatCount = {\n        \"SecondDivision\" : 0,\n        \"FirstDivision\" : 0,\n        \"Distinction\" : 0,\n        \"Fail\" : 0\n      }\n      var report = obj.data\n      Enumerable.from(report).forEach(reportObj => {\n        if(reportObj[\"TotalPercentage\"] > 40 && reportObj[\"TotalPercentage\"] <= 60){\n            reportObj[\"result\"] = \"Second Division\";\n            pragatCount[\"SecondDivision\"] += 1\n        }\n        else if(reportObj[\"TotalPercentage\"] > 60 && reportObj[\"TotalPercentage\"] <= 80){\n            reportObj[\"result\"] = \"First Division\";\n            pragatCount[\"FirstDivision\"] += 1\n        }\n        else if(reportObj[\"TotalPercentage\"] > 80 && reportObj[\"TotalPercentage\"] <= 100){\n            reportObj[\"result\"] = \"Distinction\";\n            pragatCount[\"Distinction\"] += 1\n        }\n        else{\n            reportObj[\"result\"] = \"Fail\";\n            pragatCount[\"Fail\"] += 1\n        }\n    });\n    var newResponse = report.filter(function (r) {\n        return r.Scored == true\n    });\n    var total_scored = newResponse.length\n    var percent_pragat = ((total_scored - pragatCount[\"Fail\"]) / total_scored) * 100\n    var percent_non_pragat = (pragatCount[\"Fail\"] / total_scored) * 100\n    var percent_distinction = (pragatCount[\"Distinction\"] / total_scored) * 100\n    var percent_FirstDivision = (pragatCount[\"FirstDivision\"] / total_scored) * 100\n    var percent_SecondDivision = (pragatCount[\"SecondDivision\"] / total_scored) * 100\n    var pragat_report = {\n        \"Pragat Percent\" : percent_pragat,\n        \"NonPragat Percent\" : percent_non_pragat,\n        \"Distinction Percent\" : percent_distinction,\n        \"FirstDivision Percent\" : percent_FirstDivision,\n        \"SecondDivision Percent\" : percent_SecondDivision,\n        \"TotalStudents Assessed\" : total_scored\n    }\n    return [pragat_report]\n    }\n \n}\n\nexport default ReportService;\n\n\n"]}