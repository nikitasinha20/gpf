{"version":3,"sources":["repositories/reportRepository.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAAyB,0BAA0B,CAAC,CAAA;AACpD,yBAAqB,kBAAkB,CAAC,CAAA;AAExC,0CAAsC,uCACtC,CAAC,CAD4E;AAC7E,yBAAqB,+BAA+B,CAAC,CAAA;AACrD,MAAY,aAAa,WAAM,2BAA2B,CAAC,CAAA;AAE3D,MAAO,CAAC,WAAW,GAAG,CAAC,CAAC;AAIxB,sDAAsC,iDAAuB;IAKzD,SAAS,CAAC,MAAyB;QAC/B,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QACvC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IAED,cAAc,CAAC,QAAe,EAAE,OAAc;QAC1C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC;IAED,qBAAqB,CAAC,OAAO,EAAE,QAAe,EAAE,OAAc,EAAE,MAAc,EAAE,KAAa;QACzF,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,MAAiB;YACpG,EAAE,CAAA,CAAC,MAAM,CAAC,CAAA,CAAC;gBACP,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YACzD,CAAC;YACD,IAAI,CAAA,CAAC;gBACD,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC7B,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;AACL,CAAC;AAtBG;IAAC,eAAM,CAAC,aAAa,CAAC;4CACO,aAAa;uDADpB;AAH1B;IAAC,uBAAU,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,eAAM,EAAE,CAAC;;oBAAA;AACjC,wBAAgB,mBAwB5B,CAAA;AACD;kBAAe,gBAAgB,CAAC","file":"reportRepository.js","sourcesContent":["import {repository} from \"nodedata/core/decorators\";\nimport {report} from '../models/report';\nimport {DynamicRepository} from 'nodedata/core/dynamic/dynamic-repository';\nimport {AuthorizationRepository} from './../security/AuthorizationRepository'\nimport {inject} from 'nodedata/di/decorators/inject';\nimport * as ReportService from '../services/reportService';\nimport * as Enumerable from 'linq';\nimport Q = require('q');\nimport { entityAction, EntityActionParam } from \"nodedata/core/decorators/entityAction\";\n\n@repository({ path: 'report', model: report })\nexport class ReportRepository extends AuthorizationRepository {\n\n    @inject(ReportService)\n    reportService: ReportService.ReportService;\n\n    preCreate(params: EntityActionParam): Q.Promise<EntityActionParam> {\n        console.log(\"***********In precreate\");\n        return Q.resolve(params);\n    }\n\n    doCreateReport(standard:string, subject:string ): Q.Promise<any>{\n        return this.reportService.createReport(standard, subject);\n    }\n\n    doCreateTeacherReport(teacher, standard:string, subject:string, pragat:boolean, saral:boolean ): Q.Promise<any>{\n        return this.reportService.createTeacherReport(teacher, standard, subject, saral).then((report:Array<any>) =>{\n            if(pragat){\n                return this.reportService.createPragatReport(report);\n            }\n            else{\n                return Q.resolve(report);\n            }\n        });\n    }\n}\nexport default ReportRepository;\n"]}