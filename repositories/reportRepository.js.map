{"version":3,"sources":["repositories/reportRepository.ts"],"names":[],"mappings":"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","file":"reportRepository.js","sourcesContent":["import {repository} from \"nodedata/core/decorators\";\nimport {report} from '../models/report';\nimport {DynamicRepository} from 'nodedata/core/dynamic/dynamic-repository';\nimport {AuthorizationRepository} from './../security/AuthorizationRepository'\nimport {inject} from 'nodedata/di/decorators/inject';\nimport * as ReportService from '../services/reportService';\nimport * as Enumerable from 'linq';\nimport Q = require('q');\nimport { entityAction, EntityActionParam } from \"nodedata/core/decorators/entityAction\";\nconst fs = require('fs')\n\n@repository({ path: 'report', model: report })\nexport class ReportRepository extends AuthorizationRepository {\n\n    @inject(ReportService)\n    reportService: ReportService.ReportService;\n\n    preCreate(params: EntityActionParam): Q.Promise<EntityActionParam> {\n        return Q.resolve(params);\n    }\n\n    doCreateReport(standard:string, subject:string ): Q.Promise<any>{\n        return this.reportService.createReport(standard, subject); \n    }\n\n    doCreateTeacherReport(params:any): Q.Promise<any>{\n        var teacher = params.teacher;\n        var standard = params.standard;\n        var subject = params.subject;\n        var pragat = params.pragat;\n        var saral = params.saral; \n        return this.reportService.createTeacherReport(teacher, standard, subject, saral).then(report =>{\n            if(pragat){\n                return this.reportService.createPragatReport(report);\n            }\n            else{\n                return Q.resolve(report);\n            }\n        });\n    }\n    \n    doSendMail(params){\n        var email = params.email;\n        var report_name = params.report_name\n        var mailer = require('nodemailer');\n\n        let transporter = mailer.createTransport({\n            \"type\": \"SMTP\",\n            \"host\": \"smtp.gmail.com\",\n            \"secure\": true,\n            \"port\": 465,\n            \"auth\": {\n              \"user\": \"pragat.gpf@gmail.com\",\n              \"pass\": \"Password@12345\"\n            }\n        });\n            \n        var mailOptions = {    \n            from: \"reports@gyanprakash.org\",\n            to: email,\n            subject: 'Report',\n            text: 'Please find attached the report you had requested for. Have a Good day!',\n            attachments: [{   \n                filename: report_name,\n                path: './' + report_name\n            }]\n        }\n\n        transporter.sendMail(mailOptions, function(err, success) {\n            if (err) {\n                // Handle error\n                console.log(\"Error: \", err)\n            }\n            console.log(\"Mail sent with attachment \" + report_name + \" to \" + email)\n        });\n    }\n}\nexport default ReportRepository;\n"]}