{"version":3,"sources":["repositories/reportRepository.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAAyB,0BAA0B,CAAC,CAAA;AACpD,yBAAqB,kBAAkB,CAAC,CAAA;AAExC,0CAAsC,uCACtC,CAAC,CAD4E;AAC7E,yBAAqB,+BAA+B,CAAC,CAAA;AACrD,MAAY,aAAa,WAAM,2BAA2B,CAAC,CAAA;AAE3D,MAAO,CAAC,WAAW,GAAG,CAAC,CAAC;AAExB,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AAGxB,sDAAsC,iDAAuB;IAKzD,SAAS,CAAC,MAAyB;QAC/B,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QACvC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IAED,cAAc,CAAC,QAAe,EAAE,OAAc;QAC1C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC;IAED,qBAAqB,CAAC,OAAO,EAAE,QAAe,EAAE,OAAc,EAAE,MAAc,EAAE,KAAa;QACzF,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM;YACxF,EAAE,CAAA,CAAC,MAAM,CAAC,CAAA,CAAC;gBACP,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YACzD,CAAC;YACD,IAAI,CAAA,CAAC;gBACD,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC7B,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,UAAU,CAAC,KAAY,EAAE,WAAkB;QACvC,IAAI,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,QAAQ,EAAE,UAAU,GAAG,EAAC,IAAI;YAChE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACzC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC/C,MAAM,GAAG,GAAG;YACZ,EAAE,EAAE,KAAK;YACT,IAAI,EAAE,yBAAyB;YAC/B,OAAO,EAAE,QAAQ;YACjB,IAAI,EAAE,yEAAyE;YAC/E,IAAI,EAAE,0FAA0F;YAChG,WAAW,EAAE;gBACT;oBACE,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE,WAAW;oBACrB,IAAI,EAAE,YAAY;oBAClB,WAAW,EAAE,YAAY;oBACzB,SAAS,EAAE,WAAW;iBACvB;aACF;SACF,CAAC;QACF,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;AAEL,CAAC;AAnDG;IAAC,eAAM,CAAC,aAAa,CAAC;4CACO,aAAa;uDADpB;AAH1B;IAAC,uBAAU,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,eAAM,EAAE,CAAC;;oBAAA;AACjC,wBAAgB,mBAqD5B,CAAA;AACD;kBAAe,gBAAgB,CAAC","file":"reportRepository.js","sourcesContent":["import {repository} from \"nodedata/core/decorators\";\nimport {report} from '../models/report';\nimport {DynamicRepository} from 'nodedata/core/dynamic/dynamic-repository';\nimport {AuthorizationRepository} from './../security/AuthorizationRepository'\nimport {inject} from 'nodedata/di/decorators/inject';\nimport * as ReportService from '../services/reportService';\nimport * as Enumerable from 'linq';\nimport Q = require('q');\nimport { entityAction, EntityActionParam } from \"nodedata/core/decorators/entityAction\";\nconst fs = require('fs')\n\n@repository({ path: 'report', model: report })\nexport class ReportRepository extends AuthorizationRepository {\n\n    @inject(ReportService)\n    reportService: ReportService.ReportService;\n\n    preCreate(params: EntityActionParam): Q.Promise<EntityActionParam> {\n        console.log(\"***********In precreate\");\n        return Q.resolve(params);\n    }\n\n    doCreateReport(standard:string, subject:string ): Q.Promise<any>{\n        return this.reportService.createReport(standard, subject);\n    }\n\n    doCreateTeacherReport(teacher, standard:string, subject:string, pragat:boolean, saral:boolean ): Q.Promise<any>{\n        return this.reportService.createTeacherReport(teacher, standard, subject, saral).then(report =>{\n            if(pragat){\n                return this.reportService.createPragatReport(report);\n            }\n            else{\n                return Q.resolve(report);\n            }\n        });\n    }\n    \n    doSendMail(email:string, report_name:string){\n        var data = fs.readFileSync(report_name, 'base64', function (err,data) {\n            if (err) {\n              return console.log(err);\n            }\n            console.log(data);\n        });\n        const sgMail = require('@sendgrid/mail');\n        sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n        const msg = {\n        to: email,\n        from: 'reports@gyanprakash.org',\n        subject: 'Report',\n        text: 'Please find attached the report you had requested for. Have a Good day!',\n        html: '<strong>Please find attached the report you had requested for. Have a Good day!</strong>',\n        attachments: [\n            {\n              content: data,\n              filename: report_name,\n              type: 'plain/text',\n              disposition: 'attachment',\n              contentId: report_name\n            },\n          ],\n        };\n        sgMail.send(msg);\n    }\n    \n}\nexport default ReportRepository;\n"]}